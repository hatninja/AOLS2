This is a guide for translating external protocol messages to internal server calls.
TCP sends data in a string, so it is the job of protocol object to convert that string data into objects which are readable by the server.

Many protocols may work differently, so sometimes manually pulling information is necessary. Look up how to use the process api for help regarding this.

----------------------
Protocol Object Layout
----------------------
Each protocol object must have these 4 functions in order to work.

:detect(client, process) 

Determines if the client is using a particular protocol.
return true to assign it to your object.

:update(client, process)

Should update the client and handle messages sent by it.

:send(client, process, call, data)

A message from process that needs to be sent to the client.

:close(client)

Called when client is detected as closed. This should be used to clear any variables that you stored for this client.

----------------------
Protocol Snippets
----------------------
Within your functions, here are snippets that you'll definitely have need of.

client.received - Contains the client's message buffer. You should only modify it in :update()

client:sendraw(msg) - Adds a string that will be sent to the client.

process:send(client, call, data) - Sends data to process that describes a message sent.

----------------------
Internal Protocol
----------------------
All :send() functions in the software use two arguments, call and data.

The call variable should be a string which describes the message being sent.

The data variable should be an object which contains.
However depending on the type of call, it may be omitted.

----------------------
Protocol Call List
----------------------
< Denotes client-sent messages.
> Denotes server-sent messages.
= Denotes messages that share the same structure, regardless of direction sent.

< INFO_REQ - Client wants to know the server's status and information. INFO_SEND is sent in reply.

> INFO_SEND = {
	software = (text),
	version = (text),

	name = (text),
	description = (text),

	maxplayers = (num),
	players = (num),
}


< JOIN_REQ - Client wishes to join the server. Either JOIN_ALLOW or JOIN_DENY may be sent

> JOIN_ALLOW

> JOIN_DENY = {
	reason = (text),
	code = (JOIN_CODE),
}


< CHAR_REQ - Client wishes to pick a character. Either CHAR_ALLOW or CHAR_DENY may be sent

< CHAR_REQ = {
	character = (text),
}

> CHAR_ALLOW

> CHAR_DENY = {
	character = (text),
	reason = (text),
	code = (CHAR_CODE),
}


< LOAD_CHARS - Client wants to load characters. Replied with SEND_CHARS.

> SEND_CHARS = {
	(Character Object),
	...
}

< LOAD_MUSIC - Client wants to load music. Replied with SEND_MUSIC.

> SEND_MUSIC = {
	(Music Object),
	...
}

< FIN - Client finished loading.


= OOC - The client sends a simple text message.

= OOC = {
	message = (text),
	name = (text),
}


= IC - The client sends an emote with dialogue. As it is a big object to construct, each variable may not be guaranteed.

= IC = {
	dialogue = (text),
	character = (text),
	name = (text),

	emote = (text),
	pre_emote = (text),

	item = (int),
	side = (SIDE_CODE),

	flip = (bool),
	interjection = (int),


	--AO2 variables
	text_color = (int),
	realization = (bool),

	...
}


= BG - Updates the background for the client.

= BG = {
	bg = (string)
}


= MUSIC - A request to play music.

= MUSIC = {
	track = (string),
	character = (string),
	name = (string),
}


= EVENT - Miscellaneous events that may have special variables associated with it. For AO2, WT/CE swooshes and HP fall under this category.

= EVENT = {
	event = (string),

	...
}


< CLOSE - Client wishes to be disconnected.